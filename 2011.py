"""
2011 암호코드
상근이와 선영이가 다른 사람들이 남매간의 대화를 듣는 것을 방지하기 위해서 대화를 서로 암호화 하기로 했다. 그래서 다음과 같은 대화를 했다.

상근: 그냥 간단히 암호화 하자. A를 1이라고 하고, B는 2로, 그리고 Z는 26으로 하는거야.
선영: 그럼 안돼. 만약, "BEAN"을 암호화하면 25114가 나오는데, 이걸 다시 글자로 바꾸는 방법은 여러 가지가 있어.
상근: 그렇네. 25114를 다시 영어로 바꾸면, "BEAAD", "YAAD", "YAN", "YKD", "BEKD", "BEAN" 총 6가지가 나오는데, BEAN이 맞는 단어라는건 쉽게 알수 있잖아?
선영: 예가 적절하지 않았네 ㅠㅠ 만약 내가 500자리 글자를 암호화 했다고 해봐. 그 때는 나올 수 있는 해석이 정말 많은데, 그걸 언제 다해봐?
상근: 얼마나 많은데?
선영: 구해보자!
어떤 암호가 주어졌을 때, 그 암호의 해석이 몇 가지가 나올 수 있는지 구하는 프로그램을 작성하시오.
"""

pw = input()
def solve(pw):

    dp = [0]* len(pw) #암호를 앞에서부터 읽어서 1자리일때, 2자리일때...n자리일때 해석의 경우의 수 체크
    if pw[0] != "0": #0으로 시작하면 틀린 암호
        dp[0] = 1
    else:
        return 0

    if len(pw)>=2:
        if pw[1] =="0":
            if int(pw[0]) <=2 :#10,20인 경우 1가지로만 해석가능
                dp[1] = 1
            else: # 30, 40, 50...인 경우 틀린 암호
                return 0
        elif int(pw[0:2]) <= 26 : # 26 이하인경우 2가지 해석 가능
            dp[1] = 2
        else:
            dp[1] = 1

    for i in range(2,len(pw)):
        if pw[i] =="0":
            if int(pw[i-1]) <=2 and int(pw[i-1]) >=1: #10, 20인 경우
                dp[i] = dp[i-2]
            else:
                return 0#30,40,50..인 경우

        elif pw[i-1] =="0": #직전 숫자가 0이였을 경우 
            dp[i] = dp[i-1]
        elif int(pw[i-1:i+1]) <= 26: # 26이하인경우 2가지 해석 가능
            dp[i] = dp[i-1] + dp[i-2]
        else:
            dp[i] = dp[i-1] 
    return((dp[len(pw)-1])%1000000)

print(solve(pw))